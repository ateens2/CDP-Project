# 탄소 감축 현황 대시보드 개발 PRD (2일 빠른 구현용)

## 1. 프로젝트 개요

### 1.1 배경
기존 CRM 시스템에 고객 관리, 매출 분석 기능에 이어 탄소 감축 현황 페이지를 추가 개발한다. 기업들이 친환경 제품 판매를 통한 환경 기여도를 수치적으로 확인하고, 고객별 분석과 예측 기능을 제공하는 대시보드를 구축한다.

### 1.2 목표
- 기업의 탄소 감축 성과를 직관적으로 시각화
- 고객별/제품별 환경 기여도 분석 도구 구축
- 고객 세그먼트 분석 및 개인화된 추천 시스템
- 미래 예측 분석 기능 제공

### 1.3 기술 스택
- Frontend: React.js, Chart.js, CSS3
- Backend: Node.js, Express.js
- Database: Google Sheets API 연동
- 기존 탄소 배출량 데이터: CSV 파일 (data/생활용품 탄소배출량.csv)

## 2. Phase 1: 기본 탄소 감축 대시보드

### 2.1 메인 대시보드 컴포넌트 개발
**파일명**: `frontend/src/pages/CarbonImpactDashboard.jsx`

#### 2.1.1 상단 요약 카드 섹션
- 총 탄소 감축량 카드 (kg CO₂ 단위)
- 동등한 나무 심기 효과 카드 (그루 단위)
- 친환경 제품 판매율 카드 (퍼센트)
- 고객 환경 참여도 카드 (퍼센트)
- 각 카드는 전월 대비 증감률 표시
- 아이콘과 색상으로 시각적 구분

#### 2.1.2 메인 차트 영역
- 월별 탄소 감축량 추이 차트 (Line Chart)
- 제품 카테고리별 감축 기여도 차트 (Pie Chart)
- 고객 세그먼트별 환경 영향 차트 (Bar Chart)
- 차트 간 상호작용 기능 (클릭 시 상세 정보 표시)

### 2.2 데이터 처리 백엔드 개발
**파일명**: `backend/routes/carbon-impact.js`

#### 2.2.1 탄소 감축 데이터 집계 API
- `/api/carbon-impact/summary` - 요약 통계 조회
- `/api/carbon-impact/trends` - 시간별 추이 데이터
- `/api/carbon-impact/by-category` - 카테고리별 분석
- `/api/carbon-impact/by-customer` - 고객별 분석

#### 2.2.2 기존 데이터 연동
- Google Sheets API를 통한 판매 데이터 조회
- CSV 파일의 탄소 배출량 데이터와 매칭
- 실시간 데이터 업데이트 로직

### 2.3 스타일링 및 반응형 디자인
**파일명**: `frontend/src/pages/CarbonImpactDashboard.css`

#### 2.3.1 디자인 요구사항
- 친환경 테마 색상 (녹색 계열)
- 카드형 레이아웃으로 정보 구조화
- 모바일/태블릿 반응형 지원
- 기존 DataAnalytics 페이지와 일관된 디자인

## 3. Phase 2: 고객 세그먼트 분석 기능

### 3.1 고객 세그먼트 분석 컴포넌트
**파일명**: `frontend/src/components/CustomerSegmentAnalysis.jsx`

#### 3.1.1 환경 의식 수준별 분류
- 고객 환경 점수 기반 세그멘테이션 (6단계: Stone, Bronze, Silver, Gold, Platinum, Diamond)
- 탄소 감축 점수를 기준으로 자동 분류
- 각 세그먼트별 고객 수, 평균 구매 금액, 환경 기여도 표시
- 세그먼트별 특성 및 행동 패턴 분석

#### 3.1.2 세대별/지역별 구매 패턴 분석
- 연령대별 친환경 제품 선호도 분석 (20대, 30대, 40대, 50대+)
- 세대별 탄소 감축 평균 점수 비교
- 지역별 환경 의식 수준 히트맵 (선택사항)
- 세대별 주요 구매 제품 카테고리 분석

#### 3.1.3 개인화된 추천 시스템
- 고객별 다음 추천 친환경 제품
- 탄소 감축 효과가 큰 제품 우선 추천
- 고객의 구매 이력 기반 맞춤형 제안
- 환경 등급 상승을 위한 개선 제안

### 3.2 고객 세그먼트 백엔드 로직
**파일명**: `backend/utils/customer-segmentation.js`

#### 3.2.1 세그멘테이션 알고리즘
- 탄소 감축 점수 기반 고객 분류 함수
- 구매 패턴 분석 알고리즘
- 세대별 통계 계산 로직
- 추천 엔진 기본 로직

#### 3.2.2 관련 API 엔드포인트
- `/api/customer-segments/analysis` - 세그먼트 분석 데이터
- `/api/customer-segments/by-age` - 세대별 분석
- `/api/customer-segments/recommendations` - 개인화 추천

## 4. Phase 3: 예측 분석 기능

### 4.1 예측 분석 컴포넌트
**파일명**: `frontend/src/components/PredictiveAnalysis.jsx`

#### 4.1.1 미래 예측 모델
- 다음 분기 탄소 감축 예상량 (선형 추세 기반)
- 월별 친환경 제품 판매 예측
- 고객별 다음 구매 시기 예측
- 목표 달성을 위한 필요 판매량 계산

#### 4.1.2 인사이트 및 권장사항
- 탄소 감축 목표 달성 가능성 평가
- 환경 성과 개선을 위한 액션 아이템
- 계절성 패턴 기반 마케팅 타이밍 제안
- 고객 세그먼트별 타겟팅 전략

### 4.2 예측 분석 백엔드 로직
**파일명**: `backend/utils/predictive-analysis.js`

#### 4.2.1 예측 알고리즘
- 시계열 데이터 기반 선형 회귀 모델
- 계절성 패턴 감지 알고리즘
- 고객별 구매 주기 분석
- 목표 달성 시뮬레이션

#### 4.2.2 관련 API 엔드포인트
- `/api/predictions/carbon-reduction` - 탄소 감축 예측
- `/api/predictions/sales-forecast` - 판매 예측
- `/api/predictions/customer-behavior` - 고객 행동 예측

## 5. 네비게이션 및 라우팅

### 5.1 메뉴 구조 업데이트
**파일명**: `frontend/src/App.jsx`

#### 5.1.1 새로운 메뉴 항목 추가
- "탄소 감축 현황" 메뉴 항목 추가
- 기존 "고객 관리", "매출 분석"과 동일한 레벨
- 아이콘 및 스타일링 일관성 유지

### 5.2 라우팅 설정
- `/carbon-impact` - 메인 대시보드
- `/carbon-impact/segments` - 고객 세그먼트 분석 (서브페이지 또는 탭)
- `/carbon-impact/predictions` - 예측 분석 (서브페이지 또는 탭)

## 6. 데이터 구조 및 계산 로직

### 6.1 기존 데이터 활용
- 고객_정보 시트의 탄소_감축_점수, 탄소_감축_등급 활용
- 제품_판매_기록 시트의 판매 데이터 활용
- CSV 파일의 제품별 탄소 배출량 데이터 활용

### 6.2 추가 계산 로직
- 나무 심기 환산 공식: 탄소 감축량(kg) ÷ 20kg = 나무 그루 수
- 친환경 제품 비율: (친환경 제품 판매량 ÷ 전체 판매량) × 100
- 고객 환경 참여도: (환경 점수 > 0인 고객 수 ÷ 전체 고객 수) × 100

### 6.3 세그멘테이션 기준
이미 탄소 감축 등급으로 스프레드 시트의 고객_정보 시트에 고객 별 등급이 포함되어 있음

## 7. 성능 및 사용자 경험

### 7.1 최적화 요구사항
- 차트 렌더링 최적화 (Chart.js 활용)
- 데이터 로딩 시 스켈레톤 UI 표시
- 에러 처리 및 사용자 친화적 메시지
- 반응형 디자인으로 모바일 지원

### 7.2 개발 우선순위
1. **1일차**: Phase 1 (기본 대시보드) 완료
2. **2일차**: Phase 2 (고객 세그먼트 분석) + Phase 3 (예측 분석) 완료

## 8. 구현 가이드라인

### 8.1 코드 구조
- 기존 DataAnalytics.jsx 구조 참고
- 컴포넌트 재사용성 고려
- API 호출 로직 분리
- 에러 처리 및 로딩 상태 관리

### 8.2 스타일링 가이드
- 기존 CSS 클래스명 컨벤션 따르기
- 친환경 테마 색상: #2d5a27, #4a7c3c, #6b9b5f
- 카드 그림자 및 호버 효과 적용
- 차트 색상 팔레트 통일

총 개발 기간: 2일 (16시간) 